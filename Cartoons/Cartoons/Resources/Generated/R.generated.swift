//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 9 colors.
  struct color {
    /// Color `cinnabar`.
    static let cinnabar = Rswift.ColorResource(bundle: R.hostingBundle, name: "cinnabar")
    /// Color `dodger_blue`.
    static let dodger_blue = Rswift.ColorResource(bundle: R.hostingBundle, name: "dodger_blue")
    /// Color `downriver`.
    static let downriver = Rswift.ColorResource(bundle: R.hostingBundle, name: "downriver")
    /// Color `kimberly`.
    static let kimberly = Rswift.ColorResource(bundle: R.hostingBundle, name: "kimberly")
    /// Color `picton_blue`.
    static let picton_blue = Rswift.ColorResource(bundle: R.hostingBundle, name: "picton_blue")
    /// Color `regent_st_blue`.
    static let regent_st_blue = Rswift.ColorResource(bundle: R.hostingBundle, name: "regent_st_blue")
    /// Color `rolling_stone`.
    static let rolling_stone = Rswift.ColorResource(bundle: R.hostingBundle, name: "rolling_stone")
    /// Color `terracotta`.
    static let terracotta = Rswift.ColorResource(bundle: R.hostingBundle, name: "terracotta")
    /// Color `wisteria`.
    static let wisteria = Rswift.ColorResource(bundle: R.hostingBundle, name: "wisteria")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cinnabar", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cinnabar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cinnabar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "dodger_blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func dodger_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.dodger_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "downriver", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func downriver(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.downriver, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "kimberly", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func kimberly(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.kimberly, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "picton_blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func picton_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.picton_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "regent_st_blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func regent_st_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.regent_st_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "rolling_stone", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func rolling_stone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.rolling_stone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "terracotta", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func terracotta(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.terracotta, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "wisteria", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func wisteria(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.wisteria, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 5 files.
  struct file {
    /// Resource file `Alice-Regular.ttf`.
    static let aliceRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Alice-Regular", pathExtension: "ttf")
    /// Resource file `CinzelDecorative-Black.ttf`.
    static let cinzelDecorativeBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "CinzelDecorative-Black", pathExtension: "ttf")
    /// Resource file `CinzelDecorative-Bold.ttf`.
    static let cinzelDecorativeBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "CinzelDecorative-Bold", pathExtension: "ttf")
    /// Resource file `CinzelDecorative-Regular.ttf`.
    static let cinzelDecorativeRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "CinzelDecorative-Regular", pathExtension: "ttf")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")

    /// `bundle.url(forResource: "Alice-Regular", withExtension: "ttf")`
    static func aliceRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.aliceRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "CinzelDecorative-Black", withExtension: "ttf")`
    static func cinzelDecorativeBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cinzelDecorativeBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "CinzelDecorative-Bold", withExtension: "ttf")`
    static func cinzelDecorativeBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cinzelDecorativeBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "CinzelDecorative-Regular", withExtension: "ttf")`
    static func cinzelDecorativeRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cinzelDecorativeRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 4 fonts.
  struct font: Rswift.Validatable {
    /// Font `Alice-Regular`.
    static let aliceRegular = Rswift.FontResource(fontName: "Alice-Regular")
    /// Font `CinzelDecorative-Black`.
    static let cinzelDecorativeBlack = Rswift.FontResource(fontName: "CinzelDecorative-Black")
    /// Font `CinzelDecorative-Bold`.
    static let cinzelDecorativeBold = Rswift.FontResource(fontName: "CinzelDecorative-Bold")
    /// Font `CinzelDecorative-Regular`.
    static let cinzelDecorativeRegular = Rswift.FontResource(fontName: "CinzelDecorative-Regular")

    /// `UIFont(name: "Alice-Regular", size: ...)`
    static func aliceRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: aliceRegular, size: size)
    }

    /// `UIFont(name: "CinzelDecorative-Black", size: ...)`
    static func cinzelDecorativeBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cinzelDecorativeBlack, size: size)
    }

    /// `UIFont(name: "CinzelDecorative-Bold", size: ...)`
    static func cinzelDecorativeBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cinzelDecorativeBold, size: size)
    }

    /// `UIFont(name: "CinzelDecorative-Regular", size: ...)`
    static func cinzelDecorativeRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cinzelDecorativeRegular, size: size)
    }

    static func validate() throws {
      if R.font.aliceRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Alice-Regular' could not be loaded, is 'Alice-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.cinzelDecorativeBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'CinzelDecorative-Black' could not be loaded, is 'CinzelDecorative-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.cinzelDecorativeBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'CinzelDecorative-Bold' could not be loaded, is 'CinzelDecorative-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.cinzelDecorativeRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'CinzelDecorative-Regular' could not be loaded, is 'CinzelDecorative-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 27 images.
  struct image {
    /// Image `Ellipse`.
    static let ellipse = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse")
    /// Image `back_color_label`.
    static let back_color_label = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_color_label")
    /// Image `back_label`.
    static let back_label = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_label")
    /// Image `clapperboard`.
    static let clapperboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "clapperboard")
    /// Image `crown`.
    static let crown = Rswift.ImageResource(bundle: R.hostingBundle, name: "crown")
    /// Image `download_button`.
    static let download_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "download_button")
    /// Image `favourites`.
    static let favourites = Rswift.ImageResource(bundle: R.hostingBundle, name: "favourites")
    /// Image `flower`.
    static let flower = Rswift.ImageResource(bundle: R.hostingBundle, name: "flower")
    /// Image `fullscreen`.
    static let fullscreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "fullscreen")
    /// Image `go_backward`.
    static let go_backward = Rswift.ImageResource(bundle: R.hostingBundle, name: "go_backward")
    /// Image `go_forward`.
    static let go_forward = Rswift.ImageResource(bundle: R.hostingBundle, name: "go_forward")
    /// Image `gradient_borders`.
    static let gradient_borders = Rswift.ImageResource(bundle: R.hostingBundle, name: "gradient_borders")
    /// Image `label`.
    static let label = Rswift.ImageResource(bundle: R.hostingBundle, name: "label")
    /// Image `launch_background`.
    static let launch_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch_background")
    /// Image `main_background`.
    static let main_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "main_background")
    /// Image `navigation_label`.
    static let navigation_label = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigation_label")
    /// Image `onb_one`.
    static let onb_one = Rswift.ImageResource(bundle: R.hostingBundle, name: "onb_one")
    /// Image `play`.
    static let play = Rswift.ImageResource(bundle: R.hostingBundle, name: "play")
    /// Image `profile_icon`.
    static let profile_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_icon")
    /// Image `slider_progress`.
    static let slider_progress = Rswift.ImageResource(bundle: R.hostingBundle, name: "slider_progress")
    /// Image `small_screen`.
    static let small_screen = Rswift.ImageResource(bundle: R.hostingBundle, name: "small_screen")
    /// Image `star_yellow`.
    static let star_yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "star_yellow")
    /// Image `star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "star")
    /// Image `stop`.
    static let stop = Rswift.ImageResource(bundle: R.hostingBundle, name: "stop")
    /// Image `thumb_slider_image`.
    static let thumb_slider_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "thumb_slider_image")
    /// Image `tree_leave`.
    static let tree_leave = Rswift.ImageResource(bundle: R.hostingBundle, name: "tree_leave")
    /// Image `tv_model`.
    static let tv_model = Rswift.ImageResource(bundle: R.hostingBundle, name: "tv_model")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse", bundle: ..., traitCollection: ...)`
    static func ellipse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back_color_label", bundle: ..., traitCollection: ...)`
    static func back_color_label(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_color_label, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back_label", bundle: ..., traitCollection: ...)`
    static func back_label(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_label, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clapperboard", bundle: ..., traitCollection: ...)`
    static func clapperboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clapperboard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "crown", bundle: ..., traitCollection: ...)`
    static func crown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "download_button", bundle: ..., traitCollection: ...)`
    static func download_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.download_button, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favourites", bundle: ..., traitCollection: ...)`
    static func favourites(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favourites, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flower", bundle: ..., traitCollection: ...)`
    static func flower(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flower, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fullscreen", bundle: ..., traitCollection: ...)`
    static func fullscreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fullscreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "go_backward", bundle: ..., traitCollection: ...)`
    static func go_backward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.go_backward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "go_forward", bundle: ..., traitCollection: ...)`
    static func go_forward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.go_forward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gradient_borders", bundle: ..., traitCollection: ...)`
    static func gradient_borders(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gradient_borders, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "label", bundle: ..., traitCollection: ...)`
    static func label(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.label, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "launch_background", bundle: ..., traitCollection: ...)`
    static func launch_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main_background", bundle: ..., traitCollection: ...)`
    static func main_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.main_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navigation_label", bundle: ..., traitCollection: ...)`
    static func navigation_label(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigation_label, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onb_one", bundle: ..., traitCollection: ...)`
    static func onb_one(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onb_one, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "play", bundle: ..., traitCollection: ...)`
    static func play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_icon", bundle: ..., traitCollection: ...)`
    static func profile_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slider_progress", bundle: ..., traitCollection: ...)`
    static func slider_progress(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slider_progress, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "small_screen", bundle: ..., traitCollection: ...)`
    static func small_screen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.small_screen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star_yellow", bundle: ..., traitCollection: ...)`
    static func star_yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stop", bundle: ..., traitCollection: ...)`
    static func stop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "thumb_slider_image", bundle: ..., traitCollection: ...)`
    static func thumb_slider_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumb_slider_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tree_leave", bundle: ..., traitCollection: ...)`
    static func tree_leave(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tree_leave, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tv_model", bundle: ..., traitCollection: ...)`
    static func tv_model(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tv_model, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `AlertView`.
    static let alertView = _R.nib._AlertView()
    /// Nib `LabelView`.
    static let labelView = _R.nib._LabelView()
    /// Nib `PlayerControlsView`.
    static let playerControlsView = _R.nib._PlayerControlsView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AlertView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.alertView) instead")
    static func alertView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.alertView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LabelView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.labelView) instead")
    static func labelView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.labelView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PlayerControlsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.playerControlsView) instead")
    static func playerControlsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.playerControlsView)
    }
    #endif

    static func alertView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.alertView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func labelView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.labelView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func playerControlsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomPlayerControls? {
      return R.nib.playerControlsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomPlayerControls
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 47 localization keys.
    struct localizable {
      /// en translation: ...offline watching is available
      ///
      /// Locales: en
      static let favourites_screen_subtitle = Rswift.StringResource(key: "favourites_screen_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: ...plunge into a fairy tale
      ///
      /// Locales: en
      static let cartoons_screen_subtitle = Rswift.StringResource(key: "cartoons_screen_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add to favourites and enjoy offline watching
      ///
      /// Locales: en
      static let onBoarding_second_logo_key = Rswift.StringResource(key: "onBoarding_second_logo_key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: All your favourite cartoons in one app
      ///
      /// Locales: en
      static let onBoarding_first_logo_key = Rswift.StringResource(key: "onBoarding_first_logo_key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Allow
      ///
      /// Locales: en
      static let allow = Rswift.StringResource(key: "allow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Are you sure to clear cache folder?
      ///
      /// Locales: en
      static let question_to_clear_cache = Rswift.StringResource(key: "question_to_clear_cache", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Are you sure to sign out?
      ///
      /// Locales: en
      static let question_to_sign_out = Rswift.StringResource(key: "question_to_sign_out", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en
      static let back = Rswift.StringResource(key: "back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Camera
      ///
      /// Locales: en
      static let camera = Rswift.StringResource(key: "camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Camera access required for capturing photos
      ///
      /// Locales: en
      static let no_camera_permissions = Rswift.StringResource(key: "no_camera_permissions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Camera is not available to use
      ///
      /// Locales: en
      static let camera_not_available = Rswift.StringResource(key: "camera_not_available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cartoons
      ///
      /// Locales: en
      static let cartoons_screen = Rswift.StringResource(key: "cartoons_screen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Choose from library
      ///
      /// Locales: en
      static let choose_from_library = Rswift.StringResource(key: "choose_from_library", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Choose mode
      ///
      /// Locales: en
      static let choose_mode = Rswift.StringResource(key: "choose_mode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Clear Cache
      ///
      /// Locales: en
      static let clear_cache = Rswift.StringResource(key: "clear_cache", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Error
      ///
      /// Locales: en
      static let error = Rswift.StringResource(key: "error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Failed reCaptcha verification. Please, try again
      ///
      /// Locales: en
      static let failed_verification = Rswift.StringResource(key: "failed_verification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Favourites
      ///
      /// Locales: en
      static let favourites_screen = Rswift.StringResource(key: "favourites_screen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Get verification code
      ///
      /// Locales: en
      static let get_code_button_key = Rswift.StringResource(key: "get_code_button_key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Here will be your cartoons stored in cache
      ///
      /// Locales: en
      static let favourites_collection_background = Rswift.StringResource(key: "favourites_collection_background", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Here will be your cartoons stored in firebase
      ///
      /// Locales: en
      static let cartoons_collection_background = Rswift.StringResource(key: "cartoons_collection_background", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Incorrect phone number. Please, check your input
      ///
      /// Locales: en
      static let invalid_number = Rswift.StringResource(key: "invalid_number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Invalid url. Try to restart the app
      ///
      /// Locales: en
      static let invalid_url = Rswift.StringResource(key: "invalid_url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Library access required for capturing photos
      ///
      /// Locales: en
      static let no_library_permission = Rswift.StringResource(key: "no_library_permission", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Library is not available to use
      ///
      /// Locales: en
      static let library_not_available = Rswift.StringResource(key: "library_not_available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No files in fireStore
      ///
      /// Locales: en
      static let empty_storage = Rswift.StringResource(key: "empty_storage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: OTP Code
      ///
      /// Locales: en
      static let otp_code_key = Rswift.StringResource(key: "otp_code_key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: One of the required views are nil
      ///
      /// Locales: en
      static let nil_view = Rswift.StringResource(key: "nil_view", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Phone number
      ///
      /// Locales: en
      static let phone_label_key = Rswift.StringResource(key: "phone_label_key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Photo Library
      ///
      /// Locales: en
      static let photo_library = Rswift.StringResource(key: "photo_library", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please choose your preferred mode to set your profile image
      ///
      /// Locales: en
      static let choose_mode_message = Rswift.StringResource(key: "choose_mode_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please, fill phone number text field
      ///
      /// Locales: en
      static let empty_phone_number = Rswift.StringResource(key: "empty_phone_number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please, wait until current operation will be finished
      ///
      /// Locales: en
      static let finish_operation = Rswift.StringResource(key: "finish_operation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Resend
      ///
      /// Locales: en
      static let resend_button_key = Rswift.StringResource(key: "resend_button_key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Server error. Please, try again
      ///
      /// Locales: en
      static let invalid_user = Rswift.StringResource(key: "invalid_user", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Server error. Please, try again
      ///
      /// Locales: en
      static let invalid_verificationId = Rswift.StringResource(key: "invalid_verificationId", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en
      static let settings_screen = Rswift.StringResource(key: "settings_screen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sign out
      ///
      /// Locales: en
      static let sign_out_button = Rswift.StringResource(key: "sign_out_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Six-digit security code was send to number:
      ///
      /// Locales: en
      static let verification_message_key = Rswift.StringResource(key: "verification_message_key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Skip
      ///
      /// Locales: en
      static let skip = Rswift.StringResource(key: "skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Start watching
      ///
      /// Locales: en
      static let start_watching = Rswift.StringResource(key: "start_watching", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Success
      ///
      /// Locales: en
      static let success = Rswift.StringResource(key: "success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Such file already exists in local folder
      ///
      /// Locales: en
      static let existing_file = Rswift.StringResource(key: "existing_file", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Take a photo
      ///
      /// Locales: en
      static let take_a_photo = Rswift.StringResource(key: "take_a_photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Wait...
      ///
      /// Locales: en
      static let choice_alert_title = Rswift.StringResource(key: "choice_alert_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: We can't find such path to file
      ///
      /// Locales: en
      static let invalid_path = Rswift.StringResource(key: "invalid_path", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: ...offline watching is available
      ///
      /// Locales: en
      static func favourites_screen_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("favourites_screen_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "favourites_screen_subtitle"
        }

        return NSLocalizedString("favourites_screen_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: ...plunge into a fairy tale
      ///
      /// Locales: en
      static func cartoons_screen_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cartoons_screen_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cartoons_screen_subtitle"
        }

        return NSLocalizedString("cartoons_screen_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Add to favourites and enjoy offline watching
      ///
      /// Locales: en
      static func onBoarding_second_logo_key(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onBoarding_second_logo_key", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onBoarding_second_logo_key"
        }

        return NSLocalizedString("onBoarding_second_logo_key", bundle: bundle, comment: "")
      }

      /// en translation: All your favourite cartoons in one app
      ///
      /// Locales: en
      static func onBoarding_first_logo_key(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onBoarding_first_logo_key", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onBoarding_first_logo_key"
        }

        return NSLocalizedString("onBoarding_first_logo_key", bundle: bundle, comment: "")
      }

      /// en translation: Allow
      ///
      /// Locales: en
      static func allow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("allow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "allow"
        }

        return NSLocalizedString("allow", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure to clear cache folder?
      ///
      /// Locales: en
      static func question_to_clear_cache(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("question_to_clear_cache", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "question_to_clear_cache"
        }

        return NSLocalizedString("question_to_clear_cache", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure to sign out?
      ///
      /// Locales: en
      static func question_to_sign_out(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("question_to_sign_out", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "question_to_sign_out"
        }

        return NSLocalizedString("question_to_sign_out", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en
      static func back(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("back", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "back"
        }

        return NSLocalizedString("back", bundle: bundle, comment: "")
      }

      /// en translation: Camera
      ///
      /// Locales: en
      static func camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera"
        }

        return NSLocalizedString("camera", bundle: bundle, comment: "")
      }

      /// en translation: Camera access required for capturing photos
      ///
      /// Locales: en
      static func no_camera_permissions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_camera_permissions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_camera_permissions"
        }

        return NSLocalizedString("no_camera_permissions", bundle: bundle, comment: "")
      }

      /// en translation: Camera is not available to use
      ///
      /// Locales: en
      static func camera_not_available(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera_not_available", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera_not_available"
        }

        return NSLocalizedString("camera_not_available", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel"
        }

        return NSLocalizedString("cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cartoons
      ///
      /// Locales: en
      static func cartoons_screen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cartoons_screen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cartoons_screen"
        }

        return NSLocalizedString("cartoons_screen", bundle: bundle, comment: "")
      }

      /// en translation: Choose from library
      ///
      /// Locales: en
      static func choose_from_library(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_from_library", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_from_library"
        }

        return NSLocalizedString("choose_from_library", bundle: bundle, comment: "")
      }

      /// en translation: Choose mode
      ///
      /// Locales: en
      static func choose_mode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_mode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_mode"
        }

        return NSLocalizedString("choose_mode", bundle: bundle, comment: "")
      }

      /// en translation: Clear Cache
      ///
      /// Locales: en
      static func clear_cache(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("clear_cache", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "clear_cache"
        }

        return NSLocalizedString("clear_cache", bundle: bundle, comment: "")
      }

      /// en translation: Error
      ///
      /// Locales: en
      static func error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error"
        }

        return NSLocalizedString("error", bundle: bundle, comment: "")
      }

      /// en translation: Failed reCaptcha verification. Please, try again
      ///
      /// Locales: en
      static func failed_verification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("failed_verification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "failed_verification"
        }

        return NSLocalizedString("failed_verification", bundle: bundle, comment: "")
      }

      /// en translation: Favourites
      ///
      /// Locales: en
      static func favourites_screen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("favourites_screen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "favourites_screen"
        }

        return NSLocalizedString("favourites_screen", bundle: bundle, comment: "")
      }

      /// en translation: Get verification code
      ///
      /// Locales: en
      static func get_code_button_key(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get_code_button_key", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "get_code_button_key"
        }

        return NSLocalizedString("get_code_button_key", bundle: bundle, comment: "")
      }

      /// en translation: Here will be your cartoons stored in cache
      ///
      /// Locales: en
      static func favourites_collection_background(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("favourites_collection_background", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "favourites_collection_background"
        }

        return NSLocalizedString("favourites_collection_background", bundle: bundle, comment: "")
      }

      /// en translation: Here will be your cartoons stored in firebase
      ///
      /// Locales: en
      static func cartoons_collection_background(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cartoons_collection_background", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cartoons_collection_background"
        }

        return NSLocalizedString("cartoons_collection_background", bundle: bundle, comment: "")
      }

      /// en translation: Incorrect phone number. Please, check your input
      ///
      /// Locales: en
      static func invalid_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invalid_number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invalid_number"
        }

        return NSLocalizedString("invalid_number", bundle: bundle, comment: "")
      }

      /// en translation: Invalid url. Try to restart the app
      ///
      /// Locales: en
      static func invalid_url(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invalid_url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invalid_url"
        }

        return NSLocalizedString("invalid_url", bundle: bundle, comment: "")
      }

      /// en translation: Library access required for capturing photos
      ///
      /// Locales: en
      static func no_library_permission(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_library_permission", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_library_permission"
        }

        return NSLocalizedString("no_library_permission", bundle: bundle, comment: "")
      }

      /// en translation: Library is not available to use
      ///
      /// Locales: en
      static func library_not_available(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("library_not_available", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "library_not_available"
        }

        return NSLocalizedString("library_not_available", bundle: bundle, comment: "")
      }

      /// en translation: No files in fireStore
      ///
      /// Locales: en
      static func empty_storage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("empty_storage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "empty_storage"
        }

        return NSLocalizedString("empty_storage", bundle: bundle, comment: "")
      }

      /// en translation: OTP Code
      ///
      /// Locales: en
      static func otp_code_key(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("otp_code_key", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "otp_code_key"
        }

        return NSLocalizedString("otp_code_key", bundle: bundle, comment: "")
      }

      /// en translation: One of the required views are nil
      ///
      /// Locales: en
      static func nil_view(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nil_view", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "nil_view"
        }

        return NSLocalizedString("nil_view", bundle: bundle, comment: "")
      }

      /// en translation: Phone number
      ///
      /// Locales: en
      static func phone_label_key(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phone_label_key", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "phone_label_key"
        }

        return NSLocalizedString("phone_label_key", bundle: bundle, comment: "")
      }

      /// en translation: Photo Library
      ///
      /// Locales: en
      static func photo_library(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("photo_library", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "photo_library"
        }

        return NSLocalizedString("photo_library", bundle: bundle, comment: "")
      }

      /// en translation: Please choose your preferred mode to set your profile image
      ///
      /// Locales: en
      static func choose_mode_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_mode_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_mode_message"
        }

        return NSLocalizedString("choose_mode_message", bundle: bundle, comment: "")
      }

      /// en translation: Please, fill phone number text field
      ///
      /// Locales: en
      static func empty_phone_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("empty_phone_number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "empty_phone_number"
        }

        return NSLocalizedString("empty_phone_number", bundle: bundle, comment: "")
      }

      /// en translation: Please, wait until current operation will be finished
      ///
      /// Locales: en
      static func finish_operation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("finish_operation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "finish_operation"
        }

        return NSLocalizedString("finish_operation", bundle: bundle, comment: "")
      }

      /// en translation: Resend
      ///
      /// Locales: en
      static func resend_button_key(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resend_button_key", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resend_button_key"
        }

        return NSLocalizedString("resend_button_key", bundle: bundle, comment: "")
      }

      /// en translation: Server error. Please, try again
      ///
      /// Locales: en
      static func invalid_user(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invalid_user", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invalid_user"
        }

        return NSLocalizedString("invalid_user", bundle: bundle, comment: "")
      }

      /// en translation: Server error. Please, try again
      ///
      /// Locales: en
      static func invalid_verificationId(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invalid_verificationId", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invalid_verificationId"
        }

        return NSLocalizedString("invalid_verificationId", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en
      static func settings_screen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings_screen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings_screen"
        }

        return NSLocalizedString("settings_screen", bundle: bundle, comment: "")
      }

      /// en translation: Sign out
      ///
      /// Locales: en
      static func sign_out_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_out_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_out_button"
        }

        return NSLocalizedString("sign_out_button", bundle: bundle, comment: "")
      }

      /// en translation: Six-digit security code was send to number:
      ///
      /// Locales: en
      static func verification_message_key(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verification_message_key", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verification_message_key"
        }

        return NSLocalizedString("verification_message_key", bundle: bundle, comment: "")
      }

      /// en translation: Skip
      ///
      /// Locales: en
      static func skip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("skip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "skip"
        }

        return NSLocalizedString("skip", bundle: bundle, comment: "")
      }

      /// en translation: Start watching
      ///
      /// Locales: en
      static func start_watching(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("start_watching", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "start_watching"
        }

        return NSLocalizedString("start_watching", bundle: bundle, comment: "")
      }

      /// en translation: Success
      ///
      /// Locales: en
      static func success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("success", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "success"
        }

        return NSLocalizedString("success", bundle: bundle, comment: "")
      }

      /// en translation: Such file already exists in local folder
      ///
      /// Locales: en
      static func existing_file(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("existing_file", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "existing_file"
        }

        return NSLocalizedString("existing_file", bundle: bundle, comment: "")
      }

      /// en translation: Take a photo
      ///
      /// Locales: en
      static func take_a_photo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("take_a_photo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "take_a_photo"
        }

        return NSLocalizedString("take_a_photo", bundle: bundle, comment: "")
      }

      /// en translation: Wait...
      ///
      /// Locales: en
      static func choice_alert_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choice_alert_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choice_alert_title"
        }

        return NSLocalizedString("choice_alert_title", bundle: bundle, comment: "")
      }

      /// en translation: We can't find such path to file
      ///
      /// Locales: en
      static func invalid_path(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invalid_path", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invalid_path"
        }

        return NSLocalizedString("invalid_path", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AlertView.validate()
      try _LabelView.validate()
      try _PlayerControlsView.validate()
    }

    struct _AlertView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AlertView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "label", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'label' is used in nib 'AlertView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LabelView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LabelView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "tree_leave", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tree_leave' is used in nib 'LabelView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PlayerControlsView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PlayerControlsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomPlayerControls? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomPlayerControls
      }

      static func validate() throws {
        if UIKit.UIImage(named: "fullscreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fullscreen' is used in nib 'PlayerControlsView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "go_backward", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'go_backward' is used in nib 'PlayerControlsView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "go_forward", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'go_forward' is used in nib 'PlayerControlsView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "stop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'stop' is used in nib 'PlayerControlsView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "label", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'label' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "launch_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch_background' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
